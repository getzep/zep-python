# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .fact_rating_instruction import FactRatingInstruction


class Session(pydantic_v1.BaseModel):
    classifications: typing.Dict[str, str] = pydantic_v1.Field()
    """
    The classes associated with the session
    """

    created_at: str
    deleted_at: str
    ended_at: str
    fact_rating_instruction: typing.Optional[FactRatingInstruction] = pydantic_v1.Field(default=None)
    """
    Deprecated
    """

    facts: typing.List[str] = pydantic_v1.Field()
    """
    Deprecated
    """

    id: int
    metadata: typing.Dict[str, typing.Any] = pydantic_v1.Field()
    """
    Deprecated
    """

    project_uuid: str
    session_id: str
    updated_at: str = pydantic_v1.Field()
    """
    Deprecated
    """

    user_id: str
    uuid_: str = pydantic_v1.Field(alias="uuid")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
