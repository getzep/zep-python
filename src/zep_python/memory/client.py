# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import pydantic_v1
from ..core.request_options import RequestOptions
from ..errors.bad_request_error import BadRequestError
from ..errors.conflict_error import ConflictError
from ..errors.internal_server_error import InternalServerError
from ..errors.not_found_error import NotFoundError
from ..types.apidata_api_error import ApidataApiError
from ..types.apidata_fact_response import ApidataFactResponse
from ..types.apidata_memory import ApidataMemory
from ..types.apidata_message import ApidataMessage
from ..types.apidata_message_list_response import ApidataMessageListResponse
from ..types.apidata_session import ApidataSession
from ..types.apidata_session_list_response import ApidataSessionListResponse
from ..types.apidata_session_search_response import ApidataSessionSearchResponse
from ..types.apidata_success_response import ApidataSuccessResponse
from ..types.fact_rating_instruction import FactRatingInstruction
from ..types.memory_type import MemoryType
from ..types.message import Message

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class MemoryClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_fact(
        self, fact_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ApidataFactResponse:
        """
        get fact by uuid

        Parameters
        ----------
        fact_uuid : str
            Fact UUID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataFactResponse
            The fact with the specified UUID.

        Examples
        --------
        from zep_python.client import Zep

        client = Zep(
            api_key="YOUR_API_KEY",
        )
        client.memory.get_fact(
            fact_uuid="factUUID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"facts/{jsonable_encoder(fact_uuid)}", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataFactResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_fact(self, fact_uuid: str, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        delete a fact

        Parameters
        ----------
        fact_uuid : str
            Fact UUID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            Deleted

        Examples
        --------
        from zep_python.client import Zep

        client = Zep(
            api_key="YOUR_API_KEY",
        )
        client.memory.delete_fact(
            fact_uuid="factUUID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"facts/{jsonable_encoder(fact_uuid)}", method="DELETE", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(str, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def add_session(
        self,
        *,
        session_id: str,
        fact_rating_instruction: typing.Optional[FactRatingInstruction] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        user_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApidataSession:
        """
        Create New Session

        Parameters
        ----------
        session_id : str
            The unique identifier of the session.

        fact_rating_instruction : typing.Optional[FactRatingInstruction]
            Optional instruction to use for fact rating.

        metadata : typing.Optional[typing.Dict[str, typing.Any]]
            The metadata associated with the session.

        user_id : typing.Optional[str]
            The unique identifier of the user associated with the session

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataSession
            The added session.

        Examples
        --------
        from zep_python.client import Zep

        client = Zep(
            api_key="YOUR_API_KEY",
        )
        client.memory.add_session(
            session_id="session_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "sessions",
            method="POST",
            json={
                "fact_rating_instruction": fact_rating_instruction,
                "metadata": metadata,
                "session_id": session_id,
                "user_id": user_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataSession, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_sessions(
        self,
        *,
        page_number: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        order_by: typing.Optional[str] = None,
        asc: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApidataSessionListResponse:
        """
        Get all sessions with optional page number, page size, order by field and order direction for pagination.

        Parameters
        ----------
        page_number : typing.Optional[int]
            Page number for pagination, starting from 1

        page_size : typing.Optional[int]
            Number of sessions to retrieve per page

        order_by : typing.Optional[str]
            Field to order the results by: created_at, updated_at, user_id, session_id

        asc : typing.Optional[bool]
            Order direction: true for ascending, false for descending

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataSessionListResponse
            List of sessions

        Examples
        --------
        from zep_python.client import Zep

        client = Zep(
            api_key="YOUR_API_KEY",
        )
        client.memory.list_sessions()
        """
        _response = self._client_wrapper.httpx_client.request(
            "sessions-ordered",
            method="GET",
            params={"page_number": page_number, "page_size": page_size, "order_by": order_by, "asc": asc},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataSessionListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def search_sessions(
        self,
        *,
        limit: typing.Optional[int] = None,
        text: typing.Optional[str] = OMIT,
        user_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApidataSessionSearchResponse:
        """
        Search sessions for the specified query.

        Parameters
        ----------
        limit : typing.Optional[int]
            The maximum number of search results to return. Defaults to None (no limit).

        text : typing.Optional[str]
            The search text.

        user_id : typing.Optional[str]
            User ID used to determine which sessions to search. Required on Community Edition.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataSessionSearchResponse
            A SessionSearchResponse object representing the search results.

        Examples
        --------
        from zep_python.client import Zep

        client = Zep(
            api_key="YOUR_API_KEY",
        )
        client.memory.search_sessions()
        """
        _response = self._client_wrapper.httpx_client.request(
            "sessions/search",
            method="POST",
            params={"limit": limit},
            json={"text": text, "user_id": user_id},
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataSessionSearchResponse, _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_session(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ApidataSession:
        """
        get session by id

        Parameters
        ----------
        session_id : str
            Session ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataSession
            The session with the specified ID.

        Examples
        --------
        from zep_python.client import Zep

        client = Zep(
            api_key="YOUR_API_KEY",
        )
        client.memory.get_session(
            session_id="sessionId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"sessions/{jsonable_encoder(session_id)}", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataSession, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_session(
        self,
        session_id: str,
        *,
        metadata: typing.Dict[str, typing.Any],
        fact_rating_instruction: typing.Optional[FactRatingInstruction] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApidataSession:
        """
        Update Session Metadata

        Parameters
        ----------
        session_id : str
            Session ID

        metadata : typing.Dict[str, typing.Any]
            The metadata to update

        fact_rating_instruction : typing.Optional[FactRatingInstruction]
            Optional instruction to use for fact rating.
            Fact rating instructions can not be unset.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataSession
            The updated session.

        Examples
        --------
        from zep_python.client import Zep

        client = Zep(
            api_key="YOUR_API_KEY",
        )
        client.memory.update_session(
            session_id="sessionId",
            metadata={},
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"sessions/{jsonable_encoder(session_id)}",
            method="PATCH",
            json={"fact_rating_instruction": fact_rating_instruction, "metadata": metadata},
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataSession, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 409:
            raise ConflictError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self,
        session_id: str,
        *,
        lastn: typing.Optional[MemoryType] = None,
        min_rating: typing.Optional[float] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApidataMemory:
        """
        Returns a memory (latest summary, list of messages and facts) for a given session

        Parameters
        ----------
        session_id : str
            The ID of the session for which to retrieve memory.

        lastn : typing.Optional[MemoryType]
            The number of most recent memory entries to retrieve.

        min_rating : typing.Optional[float]
            The minimum rating by which to filter facts

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataMemory
            OK

        Examples
        --------
        from zep_python.client import Zep

        client = Zep(
            api_key="YOUR_API_KEY",
        )
        client.memory.get(
            session_id="sessionId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"sessions/{jsonable_encoder(session_id)}/memory",
            method="GET",
            params={"lastn": lastn, "minRating": min_rating},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataMemory, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def add(
        self,
        session_id: str,
        *,
        messages: typing.Sequence[Message],
        fact_instruction: typing.Optional[str] = OMIT,
        summary_instruction: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApidataSuccessResponse:
        """
        Add memory to the specified session.

        Parameters
        ----------
        session_id : str
            The ID of the session to which memory should be added.

        messages : typing.Sequence[Message]
            A list of message objects, where each message contains a role and content.

        fact_instruction : typing.Optional[str]
            Additional instruction for generating the facts.

        summary_instruction : typing.Optional[str]
            Additional instruction for generating the summary.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataSuccessResponse
            OK

        Examples
        --------
        from zep_python import Message
        from zep_python.client import Zep

        client = Zep(
            api_key="YOUR_API_KEY",
        )
        client.memory.add(
            session_id="sessionId",
            messages=[Message()],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"sessions/{jsonable_encoder(session_id)}/memory",
            method="POST",
            json={
                "fact_instruction": fact_instruction,
                "messages": messages,
                "summary_instruction": summary_instruction,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataSuccessResponse, _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ApidataSuccessResponse:
        """
        delete memory messages by session id

        Parameters
        ----------
        session_id : str
            The ID of the session for which memory should be deleted.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataSuccessResponse
            OK

        Examples
        --------
        from zep_python.client import Zep

        client = Zep(
            api_key="YOUR_API_KEY",
        )
        client.memory.delete(
            session_id="sessionId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"sessions/{jsonable_encoder(session_id)}/memory", method="DELETE", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataSuccessResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_session_messages(
        self,
        session_id: str,
        *,
        limit: typing.Optional[int] = None,
        cursor: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApidataMessageListResponse:
        """
        Lists messages for a session, specified by limit and cursor.

        Parameters
        ----------
        session_id : str
            Session ID

        limit : typing.Optional[int]
            Limit the number of results returned

        cursor : typing.Optional[int]
            Cursor for pagination

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataMessageListResponse
            OK

        Examples
        --------
        from zep_python.client import Zep

        client = Zep(
            api_key="YOUR_API_KEY",
        )
        client.memory.get_session_messages(
            session_id="sessionId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"sessions/{jsonable_encoder(session_id)}/messages",
            method="GET",
            params={"limit": limit, "cursor": cursor},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataMessageListResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_session_message(
        self, session_id: str, message_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ApidataMessage:
        """
        Gets a specific message from a session

        Parameters
        ----------
        session_id : str
            The ID of the session.

        message_uuid : str
            The UUID of the message.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataMessage
            The message.

        Examples
        --------
        from zep_python.client import Zep

        client = Zep(
            api_key="YOUR_API_KEY",
        )
        client.memory.get_session_message(
            session_id="sessionId",
            message_uuid="messageUUID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"sessions/{jsonable_encoder(session_id)}/messages/{jsonable_encoder(message_uuid)}",
            method="GET",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataMessage, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_message_metadata(
        self,
        session_id: str,
        message_uuid: str,
        *,
        metadata: typing.Dict[str, typing.Any],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApidataMessage:
        """
        Updates the metadata of a message.

        Parameters
        ----------
        session_id : str
            The ID of the session.

        message_uuid : str
            The UUID of the message.

        metadata : typing.Dict[str, typing.Any]
            The metadata to update

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataMessage
            The updated message.

        Examples
        --------
        from zep_python.client import Zep

        client = Zep(
            api_key="YOUR_API_KEY",
        )
        client.memory.update_message_metadata(
            session_id="sessionId",
            message_uuid="messageUUID",
            metadata={},
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"sessions/{jsonable_encoder(session_id)}/messages/{jsonable_encoder(message_uuid)}",
            method="PATCH",
            json={"metadata": metadata},
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataMessage, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncMemoryClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_fact(
        self, fact_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ApidataFactResponse:
        """
        get fact by uuid

        Parameters
        ----------
        fact_uuid : str
            Fact UUID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataFactResponse
            The fact with the specified UUID.

        Examples
        --------
        from zep_python.client import AsyncZep

        client = AsyncZep(
            api_key="YOUR_API_KEY",
        )
        await client.memory.get_fact(
            fact_uuid="factUUID",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"facts/{jsonable_encoder(fact_uuid)}", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataFactResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_fact(self, fact_uuid: str, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        delete a fact

        Parameters
        ----------
        fact_uuid : str
            Fact UUID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            Deleted

        Examples
        --------
        from zep_python.client import AsyncZep

        client = AsyncZep(
            api_key="YOUR_API_KEY",
        )
        await client.memory.delete_fact(
            fact_uuid="factUUID",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"facts/{jsonable_encoder(fact_uuid)}", method="DELETE", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(str, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def add_session(
        self,
        *,
        session_id: str,
        fact_rating_instruction: typing.Optional[FactRatingInstruction] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        user_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApidataSession:
        """
        Create New Session

        Parameters
        ----------
        session_id : str
            The unique identifier of the session.

        fact_rating_instruction : typing.Optional[FactRatingInstruction]
            Optional instruction to use for fact rating.

        metadata : typing.Optional[typing.Dict[str, typing.Any]]
            The metadata associated with the session.

        user_id : typing.Optional[str]
            The unique identifier of the user associated with the session

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataSession
            The added session.

        Examples
        --------
        from zep_python.client import AsyncZep

        client = AsyncZep(
            api_key="YOUR_API_KEY",
        )
        await client.memory.add_session(
            session_id="session_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "sessions",
            method="POST",
            json={
                "fact_rating_instruction": fact_rating_instruction,
                "metadata": metadata,
                "session_id": session_id,
                "user_id": user_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataSession, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_sessions(
        self,
        *,
        page_number: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        order_by: typing.Optional[str] = None,
        asc: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApidataSessionListResponse:
        """
        Get all sessions with optional page number, page size, order by field and order direction for pagination.

        Parameters
        ----------
        page_number : typing.Optional[int]
            Page number for pagination, starting from 1

        page_size : typing.Optional[int]
            Number of sessions to retrieve per page

        order_by : typing.Optional[str]
            Field to order the results by: created_at, updated_at, user_id, session_id

        asc : typing.Optional[bool]
            Order direction: true for ascending, false for descending

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataSessionListResponse
            List of sessions

        Examples
        --------
        from zep_python.client import AsyncZep

        client = AsyncZep(
            api_key="YOUR_API_KEY",
        )
        await client.memory.list_sessions()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "sessions-ordered",
            method="GET",
            params={"page_number": page_number, "page_size": page_size, "order_by": order_by, "asc": asc},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataSessionListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def search_sessions(
        self,
        *,
        limit: typing.Optional[int] = None,
        text: typing.Optional[str] = OMIT,
        user_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApidataSessionSearchResponse:
        """
        Search sessions for the specified query.

        Parameters
        ----------
        limit : typing.Optional[int]
            The maximum number of search results to return. Defaults to None (no limit).

        text : typing.Optional[str]
            The search text.

        user_id : typing.Optional[str]
            User ID used to determine which sessions to search. Required on Community Edition.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataSessionSearchResponse
            A SessionSearchResponse object representing the search results.

        Examples
        --------
        from zep_python.client import AsyncZep

        client = AsyncZep(
            api_key="YOUR_API_KEY",
        )
        await client.memory.search_sessions()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "sessions/search",
            method="POST",
            params={"limit": limit},
            json={"text": text, "user_id": user_id},
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataSessionSearchResponse, _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_session(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ApidataSession:
        """
        get session by id

        Parameters
        ----------
        session_id : str
            Session ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataSession
            The session with the specified ID.

        Examples
        --------
        from zep_python.client import AsyncZep

        client = AsyncZep(
            api_key="YOUR_API_KEY",
        )
        await client.memory.get_session(
            session_id="sessionId",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"sessions/{jsonable_encoder(session_id)}", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataSession, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_session(
        self,
        session_id: str,
        *,
        metadata: typing.Dict[str, typing.Any],
        fact_rating_instruction: typing.Optional[FactRatingInstruction] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApidataSession:
        """
        Update Session Metadata

        Parameters
        ----------
        session_id : str
            Session ID

        metadata : typing.Dict[str, typing.Any]
            The metadata to update

        fact_rating_instruction : typing.Optional[FactRatingInstruction]
            Optional instruction to use for fact rating.
            Fact rating instructions can not be unset.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataSession
            The updated session.

        Examples
        --------
        from zep_python.client import AsyncZep

        client = AsyncZep(
            api_key="YOUR_API_KEY",
        )
        await client.memory.update_session(
            session_id="sessionId",
            metadata={},
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"sessions/{jsonable_encoder(session_id)}",
            method="PATCH",
            json={"fact_rating_instruction": fact_rating_instruction, "metadata": metadata},
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataSession, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 409:
            raise ConflictError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self,
        session_id: str,
        *,
        lastn: typing.Optional[MemoryType] = None,
        min_rating: typing.Optional[float] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApidataMemory:
        """
        Returns a memory (latest summary, list of messages and facts) for a given session

        Parameters
        ----------
        session_id : str
            The ID of the session for which to retrieve memory.

        lastn : typing.Optional[MemoryType]
            The number of most recent memory entries to retrieve.

        min_rating : typing.Optional[float]
            The minimum rating by which to filter facts

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataMemory
            OK

        Examples
        --------
        from zep_python.client import AsyncZep

        client = AsyncZep(
            api_key="YOUR_API_KEY",
        )
        await client.memory.get(
            session_id="sessionId",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"sessions/{jsonable_encoder(session_id)}/memory",
            method="GET",
            params={"lastn": lastn, "minRating": min_rating},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataMemory, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def add(
        self,
        session_id: str,
        *,
        messages: typing.Sequence[Message],
        fact_instruction: typing.Optional[str] = OMIT,
        summary_instruction: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApidataSuccessResponse:
        """
        Add memory to the specified session.

        Parameters
        ----------
        session_id : str
            The ID of the session to which memory should be added.

        messages : typing.Sequence[Message]
            A list of message objects, where each message contains a role and content.

        fact_instruction : typing.Optional[str]
            Additional instruction for generating the facts.

        summary_instruction : typing.Optional[str]
            Additional instruction for generating the summary.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataSuccessResponse
            OK

        Examples
        --------
        from zep_python import Message
        from zep_python.client import AsyncZep

        client = AsyncZep(
            api_key="YOUR_API_KEY",
        )
        await client.memory.add(
            session_id="sessionId",
            messages=[Message()],
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"sessions/{jsonable_encoder(session_id)}/memory",
            method="POST",
            json={
                "fact_instruction": fact_instruction,
                "messages": messages,
                "summary_instruction": summary_instruction,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataSuccessResponse, _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ApidataSuccessResponse:
        """
        delete memory messages by session id

        Parameters
        ----------
        session_id : str
            The ID of the session for which memory should be deleted.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataSuccessResponse
            OK

        Examples
        --------
        from zep_python.client import AsyncZep

        client = AsyncZep(
            api_key="YOUR_API_KEY",
        )
        await client.memory.delete(
            session_id="sessionId",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"sessions/{jsonable_encoder(session_id)}/memory", method="DELETE", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataSuccessResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_session_messages(
        self,
        session_id: str,
        *,
        limit: typing.Optional[int] = None,
        cursor: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApidataMessageListResponse:
        """
        Lists messages for a session, specified by limit and cursor.

        Parameters
        ----------
        session_id : str
            Session ID

        limit : typing.Optional[int]
            Limit the number of results returned

        cursor : typing.Optional[int]
            Cursor for pagination

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataMessageListResponse
            OK

        Examples
        --------
        from zep_python.client import AsyncZep

        client = AsyncZep(
            api_key="YOUR_API_KEY",
        )
        await client.memory.get_session_messages(
            session_id="sessionId",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"sessions/{jsonable_encoder(session_id)}/messages",
            method="GET",
            params={"limit": limit, "cursor": cursor},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataMessageListResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_session_message(
        self, session_id: str, message_uuid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ApidataMessage:
        """
        Gets a specific message from a session

        Parameters
        ----------
        session_id : str
            The ID of the session.

        message_uuid : str
            The UUID of the message.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataMessage
            The message.

        Examples
        --------
        from zep_python.client import AsyncZep

        client = AsyncZep(
            api_key="YOUR_API_KEY",
        )
        await client.memory.get_session_message(
            session_id="sessionId",
            message_uuid="messageUUID",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"sessions/{jsonable_encoder(session_id)}/messages/{jsonable_encoder(message_uuid)}",
            method="GET",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataMessage, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_message_metadata(
        self,
        session_id: str,
        message_uuid: str,
        *,
        metadata: typing.Dict[str, typing.Any],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApidataMessage:
        """
        Updates the metadata of a message.

        Parameters
        ----------
        session_id : str
            The ID of the session.

        message_uuid : str
            The UUID of the message.

        metadata : typing.Dict[str, typing.Any]
            The metadata to update

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApidataMessage
            The updated message.

        Examples
        --------
        from zep_python.client import AsyncZep

        client = AsyncZep(
            api_key="YOUR_API_KEY",
        )
        await client.memory.update_message_metadata(
            session_id="sessionId",
            message_uuid="messageUUID",
            metadata={},
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"sessions/{jsonable_encoder(session_id)}/messages/{jsonable_encoder(message_uuid)}",
            method="PATCH",
            json={"metadata": metadata},
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApidataMessage, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(ApidataApiError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
